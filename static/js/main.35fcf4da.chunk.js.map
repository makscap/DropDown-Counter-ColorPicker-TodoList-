{"version":3,"sources":["components/ColorPicker/ColorPicker.js","components/Counter/Controls.js","components/Counter/Value.js","components/Counter/Counter.js","components/DropDown/DropdownToggle.js","components/TodoList/TodoList.js","App.js","index.js"],"names":["ColorPicker","state","activeOptionIdx","makeOptionClassName","index","optionClasses","push","join","setActiveIdx","setState","this","options","props","label","className","map","color","style","backgroundColor","onClick","Component","Controls","onIncrement","onDecrement","type","Value","value","Counter","initialValue","handleIncrement","prevState","handleDecrement","React","defaultProps","Dropdown","visible","toggle","TodoList","todos","onDeleteTodo","id","text","colorPickerOpts","App","initialTodos","deleteTodo","todoId","filter","todo","totalTodoCount","length","completedTodoCount","reduce","total","completed","DropdownToggle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35fcf4da.chunk.js","sourcesContent":["import React, {Component} from 'react';\n// import s from './ColorPicker.module.css';\nimport './ColorPicker.css'\n\nclass ColorPicker extends Component {\nstate = {\n  activeOptionIdx: 0,\n};\n\nmakeOptionClassName = (index) => {\n  const optionClasses = ['ColorPicker__option']\n\n  if(index === this.state.activeOptionIdx) {\n    optionClasses.push('ColorPicker__option--active');\n  }\n  return optionClasses.join(' ');\n}\n\nsetActiveIdx = (index) => {\n  this.setState({activeOptionIdx: index})\n};\n\n\n  render() {\nconst {activeOptionIdx} = this.state;\nconst {options} = this.props;\n\n    const {label} = options[activeOptionIdx];\n   \n    return (\n      <div className=\"ColorPicker__container\">\n        <h2 className=\"ColorPicker__title\">Color Picker</h2>\n    <p>Выбранный цвет: {label}</p>\n        <div>\n          {options.map(({label, color}, index) => (\n<button\nkey={label}\nclassName={this.makeOptionClassName(index)}\nstyle={{ backgroundColor: color }}\nonClick={() => this.setActiveIdx(index)}\n></button>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default ColorPicker;","import React from 'react';\n\nconst Controls = ({onIncrement, onDecrement}) => (\n    <div className=\"Counter__controls\">\n    <button type=\"button\" onClick={onIncrement}>Увеличить на 1</button>\n    <button type=\"button\" onClick={onDecrement}>Уменьшить на 1</button>\n    </div>\n)\n\nexport default Controls;","import React from 'react';\n\nconst Value = ({value}) => (\n    <span className=\"Counter__value\">{value}</span>\n);\n\nexport default Value;","import React from 'react';\nimport './Counter.css';\nimport './Controls';\nimport Controls from './Controls';\nimport Value from './Value';\n\nclass Counter extends React.Component {\n    static defaultProps = {\n        initialValue: 0,\n    }\n\n    // static propTypes = {\n\n    // }\n\n    // constructor() {\n    //     super();\n\n    //     this.state = {\n    //         value: 0,\n    //     }\n    // }\n\n    state = {\n        value: this.props.initialValue,\n    };\n\n\n    handleIncrement = () => {\nthis.setState((prevState) => ({\n        value: prevState.value + 1,\n    }));\n};\n\n    handleDecrement = () => {\nthis.setState((prevState) => ({\n        value: prevState.value - 1,\n    }));\n\n    }\n\n    render () {\n        const {value} = this.state;\n        return (\n            <div className=\"Counter\">\n                <Value value={value} />\n                {/* <span className=\"Counter__value\">{value}</span> */}\n<Controls onIncrement={this.handleIncrement} onDecrement={this.handleDecrement}/>\n                </div>\n        );\n    }\n}\n\nexport default Counter;","import React, { Component } from 'react';\nimport './Dropdown.css';\n\nclass Dropdown extends Component {\n    state = {\n        visible: false,\n    }\n\ntoggle = () => {\n    this.setState(prevState => ({\n        visible: !prevState.visible,\n    }))\n}\n\n    // show = () => {\n    //     this.setState({visible: true});\n    // }\n\n    // hide = () => {\n    //     this.setState({visible: false});\n    // }\n\n    render() {\n        const {visible} = this.state;\n        return (\n            <div className=\"Dropdown\">\n                <button \n                type=\"button\" \n                className=\"Dropdown__toggle\" \n                onClick={this.toggle}\n        >{visible ? 'Скрыть' : 'Показать'}</button>\n                \n{visible && (\n    <div className=\"Dropdown__menu\">Выпадающее меню</div>\n)}\n            </div>\n        )\n    }\n}\n\nexport default Dropdown;","import React from 'react';\nimport './TodoList.css';\n\nconst TodoList = ({ todos, onDeleteTodo }) => (\n    <ul className=\"TodoList__text\">\n{todos.map(({id, text}) => \n<li key={id} className=\"TodoList__item\">\n    <p className=\"TodoList__text\">{text}</p>\n    <button onClick={() => onDeleteTodo(id)}>Удалить</button>\n    </li>)}  \n\n</ul>\n);\n\nexport default TodoList;","// import './App.css';\nimport React, { Component } from 'react';\nimport ColorPicker from './components/ColorPicker';\nimport Counter from './components/Counter';\n// import Dropdown from './components/Dropdown/Dropdown';\nimport DropdownToggle from './components/DropDown';\nimport TodoList from './components/TodoList';\nimport initialTodos from './todos.json'\n\nconst colorPickerOpts = [\n     {label: 'red', color: 'lightcoral'},\n     { label: 'green', color: 'lightgreen'},\n     { label: 'yellow', color: 'lightyellow'}];\n    \nclass App extends Component {\n  state = {\n    todos: initialTodos,\n  };\n\n  deleteTodo = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }))\n  }\n\n  render() {\n    const {todos} = this.state;\n\n    const totalTodoCount = todos.length;\n    const completedTodoCount = todos.reduce(\n      (total, todo) => (todo.completed ? total + 1 : total),\n      0,\n    );\n\n    return (\n       <>\n      <h1>Состояние компонента</h1>\n    <Counter initialValue={10}/>\n    {/* <Dropdown /> */}\n    <DropdownToggle />\n    <ColorPicker options={colorPickerOpts} />\n    <h2>Состояние елементов</h2>\n\n<div>\n<p>Общее кол-во: {totalTodoCount}</p>\n    <p>Кол-во выполненых:{completedTodoCount}</p>\n</div>\n    <TodoList todos={todos} onDeleteTodo={this.deleteTodo} />\n    </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}